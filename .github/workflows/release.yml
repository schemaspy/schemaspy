name: Release SchemaSpy

on:
  workflow_dispatch:
    inputs:
      release_version:
        description: 'Version to release [n.n.n]'
        required: true
      next_development_version:
        description: 'Next development version [n.n.n]'
        required: true

jobs:
  release:
    if: ${{ github.repository_owner == 'schemaspy' }}
    runs-on: ubuntu-latest

    steps:
      - name: Check Inputs
        run: '[[ $RELEASE_VERSION =~ $VERSION_PATTERN ]] && [[ $NEXT_VERSION =~ $VERSION_PATTERN ]]'
        env:
          RELEASE_VERSION: ${{ github.event.inputs.release_version }}
          NEXT_VERSION: ${{ github.event.inputs.next_development_version }}
          VERSION_PATTERN: '^[0-9]+\.[0-9]+\.[0-9]+$'
      - uses: actions/checkout@v3
        if: success()
        with:
          fetch-depth: 0
      - name: Setup JDK 17
        if: success()
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17
          cache: 'maven'
          server-id: ossrh
          server-username: OSSRH_USERNAME
          server-password: OSSRH_PASSWORD
          gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }}
          gpg-passphrase: MAVEN_GPG_PASSPHRASE
      - name: Install Graphviz
        if: success()
        run: sudo apt-get install graphviz
      - name: Cache SonarCloud packages
        if: success()
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Create/Update draft
        if: success()
        uses: npetzall/release-ready-action@20fb399661f83887d8e7b6e8b62b78757975bfcc
        id: drafting
        with:
          draft-tag: "v${{ github.event.inputs.release_version }}"
          template: ".github/release-ready/release_notes.dot"
      - name: Setup git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "action@github.com"
      - name: Maven Prepare release
        if: success()
        run: >
          ./mvnw
          --batch-mode
          --errors
          --show-version
          release:prepare
          -DreleaseVersion=${{ github.event.inputs.release_version }}
          -DdevelopmentVersion=${{ github.event.inputs.next_development_version }}-SNAPSHOT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      - name: Maven Perform release
        run: >
          ./mvnw
          --batch-mode
          --errors
          --show-version
          release:perform
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}
      - name: Upload Release Asset Jar
        if: success()
        id: upload-release-asset-jar
        uses: npetzall/upload-release-asset@384b047305ab6dc8050e8b2c83772af692cd80cd
        with:
          release_id: ${{ steps.drafting.outputs.draft-id }}
          asset_path: ./target/checkout/target/schemaspy-${{ github.event.inputs.release_version }}-app.jar
          asset_name: schemaspy-app.jar
          asset_content_type: application/java-archive
      - name: Upload Release Asset Signing
        if: success()
        id: upload-release-asset-asc
        uses: npetzall/upload-release-asset@384b047305ab6dc8050e8b2c83772af692cd80cd
        with:
          release_id: ${{ steps.drafting.outputs.draft-id }}
          asset_path: ./target/checkout/target/schemaspy-${{ github.event.inputs.release_version }}-app.jar.asc
          asset_name: schemaspy-app.jar.asc
          asset_content_type: text/plain
      - name: Upload Release Asset Checksum md5
        if: success()
        id: upload-release-asset-md5
        uses: npetzall/upload-release-asset@384b047305ab6dc8050e8b2c83772af692cd80cd
        with:
          release_id: ${{ steps.drafting.outputs.draft-id }}
          asset_path: ./target/checkout/target/schemaspy-${{ github.event.inputs.release_version }}-app.jar.md5
          asset_name: schemaspy-app.jar.md5
          asset_content_type: text/plain
      - name: Upload Release Asset Checksum sha1
        if: success()
        id: upload-release-asset-sha1
        uses: npetzall/upload-release-asset@384b047305ab6dc8050e8b2c83772af692cd80cd
        with:
          release_id: ${{ steps.drafting.outputs.draft-id }}
          asset_path: ./target/checkout/target/schemaspy-${{ github.event.inputs.release_version }}-app.jar.sha1
          asset_name: schemaspy-app.jar.sha1
          asset_content_type: text/plain
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up QEMU (Docker)
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: v0.19.3
      - name: Set GIT_BRANCH, GIT_REVISION
        run: |
          echo "GIT_BRANCH=$(git rev-parse --abbrev-ref HEAD)" >> "$GITHUB_ENV"
          echo "GIT_REVISION=$(git rev-parse HEAD)" >> "$GITHUB_ENV"
        working-directory: ./target/checkout
      - name: Docker Buildx Bake(Temurin-snapshot)
        uses: docker/bake-action@v6
        with:
          source: .
          files: docker-bake.hcl
          push: true
          targets: release
        env:
          VERSION: ${{ github.event.inputs.release_version }}"
