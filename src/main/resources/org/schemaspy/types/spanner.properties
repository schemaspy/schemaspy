#
# Google Cloud Spanner database type configuration for SchemaSpy
#
dbms=Google Cloud Spanner
description=Standard JDBC connection
connectionSpec=jdbc:cloudspanner:/projects/<project>/instances/<instance>/databases/<db>?credentials=<credentials>
driver=com.google.cloud.spanner.jdbc.JdbcDriver

# Parameter descriptions
project=Google Cloud Project ID
instance=Cloud Spanner Instance ID
db=Database name within the instance
credentials=Path to service account JSON key file (optional if using default credentials)

# Connection properties
host=Not required for Cloud Spanner
port=Not required for Cloud Spanner

# Spanner-specific SQL overrides
selectSchemasSql=SELECT SCHEMA_NAME as schema_name, NULL as schema_comment FROM INFORMATION_SCHEMA.SCHEMATA WHERE SCHEMA_NAME = :schema

selectTablesSql=SELECT t.TABLE_NAME as table_name, t.TABLE_CATALOG as table_catalog, t.TABLE_SCHEMA as table_schema, NULL as table_comment, NULL as table_rows FROM INFORMATION_SCHEMA.TABLES t WHERE t.TABLE_SCHEMA = :schema AND t.TABLE_TYPE = 'BASE TABLE'

selectViewsSql=SELECT v.TABLE_NAME as view_name, v.TABLE_CATALOG as view_catalog, v.TABLE_SCHEMA as view_schema, NULL as view_comment, v.VIEW_DEFINITION as view_definition FROM INFORMATION_SCHEMA.VIEWS v WHERE v.TABLE_SCHEMA = :schema

selectColumnsSql=SELECT c.COLUMN_NAME as column_name, c.TABLE_NAME as table_name, c.ORDINAL_POSITION as ordinal_position, c.COLUMN_DEFAULT as column_default, c.IS_NULLABLE as is_nullable, c.DATA_TYPE as data_type, c.CHARACTER_MAXIMUM_LENGTH as character_maximum_length, c.NUMERIC_PRECISION as numeric_precision, c.NUMERIC_SCALE as numeric_scale, NULL as column_comment FROM INFORMATION_SCHEMA.COLUMNS c WHERE c.TABLE_SCHEMA = :schema ORDER BY c.TABLE_NAME, c.ORDINAL_POSITION

selectPrimaryKeysSql=SELECT kcu.TABLE_NAME as table_name, kcu.COLUMN_NAME as column_name, kcu.ORDINAL_POSITION as key_seq, tc.CONSTRAINT_NAME as pk_name FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS tc JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE kcu ON tc.CONSTRAINT_NAME = kcu.CONSTRAINT_NAME AND tc.TABLE_SCHEMA = kcu.TABLE_SCHEMA WHERE tc.CONSTRAINT_TYPE = 'PRIMARY KEY' AND tc.TABLE_SCHEMA = :schema

selectIndexesSql=SELECT i.INDEX_NAME as index_name, i.TABLE_NAME as table_name, ic.COLUMN_NAME as column_name, ic.ORDINAL_POSITION as ordinal_position, i.IS_UNIQUE as is_unique, NULL as index_comment FROM INFORMATION_SCHEMA.INDEXES i JOIN INFORMATION_SCHEMA.INDEX_COLUMNS ic ON i.INDEX_NAME = ic.INDEX_NAME AND i.TABLE_SCHEMA = ic.TABLE_SCHEMA WHERE i.TABLE_SCHEMA = :schema AND i.INDEX_TYPE != 'PRIMARY_KEY' ORDER BY i.INDEX_NAME, ic.ORDINAL_POSITION

selectForeignKeysSql=SELECT rc.CONSTRAINT_NAME as fk_name, kcu1.TABLE_NAME as fk_table_name, kcu1.COLUMN_NAME as fk_column_name, kcu2.TABLE_NAME as pk_table_name, kcu2.COLUMN_NAME as pk_column_name FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS rc JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE kcu1 ON rc.CONSTRAINT_NAME = kcu1.CONSTRAINT_NAME AND rc.CONSTRAINT_SCHEMA = kcu1.TABLE_SCHEMA JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE kcu2 ON rc.UNIQUE_CONSTRAINT_NAME = kcu2.CONSTRAINT_NAME AND rc.CONSTRAINT_SCHEMA = kcu2.TABLE_SCHEMA WHERE rc.CONSTRAINT_SCHEMA = :schema

# Spanner doesn't support traditional sequences, but we can query for auto-generated columns
selectSequencesSql=SELECT NULL as sequence_name, NULL as start_value, NULL as increment FROM (SELECT 1) WHERE 1=0

# Table and view types supported by Spanner
tableTypes=BASE TABLE
viewTypes=VIEW

# Threading configuration
dbThreads=5
