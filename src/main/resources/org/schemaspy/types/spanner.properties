#
# Google Cloud Spanner database type configuration
# see https://schemaspy.readthedocs.io/en/latest/configuration/databaseType.html
# for configuration / customization details
#

# Database Management System
dbms=Google Cloud Spanner
description=Standard Google Cloud Spanner connection

# Connection specification
# Format: jdbc:cloudspanner:/projects/<project>/instances/<instance>/databases/<database>
# Additional parameters can be added such as:
# - credentials=/path/to/service-account-key.json
# - autoConfigEmulator=true (for emulator connections)
connectionSpec=jdbc:cloudspanner:/projects/<project>/instances/<instance>/databases/<db>

# Parameter descriptions
project=Google Cloud Project ID
instance=Cloud Spanner instance ID
db=Cloud Spanner database name

# JDBC Driver class
# Using the official Google Cloud Spanner JDBC driver
driver=com.google.cloud.spanner.jdbc.JdbcDriver

# Spanner doesn't have traditional schemas like other databases
# All tables are in a single "default" schema/namespace
# Use empty schema or set to database name
schemaSpec=.*

# Select tables from INFORMATION_SCHEMA
# Spanner's INFORMATION_SCHEMA.TABLES contains table metadata
selectTablesSql=SELECT \
  t.table_catalog AS table_catalog, \
  t.table_schema AS table_schema, \
  t.table_name AS table_name, \
  CAST(NULL AS STRING) AS table_comment, \
  CAST(NULL AS INT64) AS table_rows \
FROM INFORMATION_SCHEMA.TABLES t \
WHERE t.table_schema = :schema \
  AND t.table_type = 'BASE TABLE'

# Select views from INFORMATION_SCHEMA
selectViewsSql=SELECT \
  v.table_catalog AS view_catalog, \
  v.table_schema AS view_schema, \
  v.table_name AS view_name, \
  v.view_definition AS view_definition, \
  CAST(NULL AS STRING) AS view_comment \
FROM INFORMATION_SCHEMA.VIEWS v \
WHERE v.table_schema = :schema

# Select column information
selectColumnTypesSql=SELECT \
  c.table_name, \
  c.column_name, \
  c.spanner_type AS column_type, \
  c.spanner_type AS short_column_type \
FROM INFORMATION_SCHEMA.COLUMNS c \
WHERE c.table_schema = :schema \
ORDER BY c.table_name, c.ordinal_position

# Select primary key constraints
# Spanner has explicit primary key support
selectPrimaryKeysSql=SELECT \
  tc.table_name, \
  kcu.column_name, \
  kcu.ordinal_position AS key_seq, \
  tc.constraint_name AS pk_name \
FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS tc \
JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE kcu \
  ON tc.constraint_name = kcu.constraint_name \
  AND tc.table_schema = kcu.table_schema \
  AND tc.table_name = kcu.table_name \
WHERE tc.table_schema = :schema \
  AND tc.constraint_type = 'PRIMARY KEY' \
ORDER BY tc.table_name, kcu.ordinal_position

# Select foreign key constraints
# Spanner supports foreign key relationships
selectForeignKeysSql=SELECT \
  kcu1.table_name AS fk_table_name, \
  kcu1.column_name AS fk_column_name, \
  kcu2.table_name AS pk_table_name, \
  kcu2.column_name AS pk_column_name, \
  kcu1.ordinal_position AS key_seq, \
  rc.constraint_name AS fk_name, \
  rc.update_rule, \
  rc.delete_rule \
FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS rc \
JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE kcu1 \
  ON rc.constraint_name = kcu1.constraint_name \
  AND rc.constraint_schema = kcu1.constraint_schema \
JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE kcu2 \
  ON rc.unique_constraint_name = kcu2.constraint_name \
  AND rc.unique_constraint_schema = kcu2.constraint_schema \
  AND kcu1.ordinal_position = kcu2.ordinal_position \
WHERE rc.constraint_schema = :schema \
ORDER BY kcu1.table_name, kcu1.ordinal_position

# Select indexes
# Spanner has robust index support
selectIndexesSql=SELECT \
  i.table_name, \
  CASE WHEN i.is_unique THEN 0 ELSE 1 END AS non_unique, \
  i.index_name, \
  ic.column_name, \
  ic.ordinal_position, \
  ic.column_ordering AS asc_or_desc, \
  CAST(NULL AS INT64) AS cardinality \
FROM INFORMATION_SCHEMA.INDEXES i \
JOIN INFORMATION_SCHEMA.INDEX_COLUMNS ic \
  ON i.table_schema = ic.table_schema \
  AND i.table_name = ic.table_name \
  AND i.index_name = ic.index_name \
WHERE i.table_schema = :schema \
  AND i.index_type = 'INDEX' \
ORDER BY i.table_name, i.index_name, ic.ordinal_position

# Select check constraints
# Spanner supports check constraints
selectCheckConstraintsSql=SELECT \
  cc.table_name, \
  cc.constraint_name, \
  cc.check_clause AS text \
FROM INFORMATION_SCHEMA.CHECK_CONSTRAINTS cc \
WHERE cc.constraint_schema = :schema \
ORDER BY cc.table_name, cc.constraint_name

# Spanner doesn't have traditional sequences
# Auto-generated keys use sequences internally but aren't exposed via INFORMATION_SCHEMA

# Get approximate row count
# Note: Spanner doesn't expose exact row counts without scanning
# This query returns NULL - users should run COUNT queries manually if needed
selectRowCountSql=SELECT CAST(NULL AS INT64) AS row_count

# Notes for users:
# 1. Replace <project>, <instance>, and <db> with your actual values
# 2. Authentication options:
#    - Service Account: Add credentials=/path/to/service-account-key.json to connection string
#    - Application Default Credentials: No additional parameters needed if ADC is configured
#    - Emulator: Add autoConfigEmulator=true to connection string
# 3. Connection string format:
#    jdbc:cloudspanner:/projects/<project>/instances/<instance>/databases/<db>
#    Example: jdbc:cloudspanner:/projects/my-project/instances/my-instance/databases/my-db
# 4. For emulator (local development):
#    jdbc:cloudspanner:/projects/test-project/instances/test-instance/databases/test-db?autoConfigEmulator=true
# 5. Spanner uses a flat namespace - no traditional schemas. Set schema to '' or database name.
# 6. Primary keys are required in Spanner - every table must have at least one primary key column
# 7. Interleaved tables (parent-child relationships) will be shown as regular tables with foreign keys
# 8. Column ordering in indexes: 'ASC' (ascending) or 'DESC' (descending)
#
