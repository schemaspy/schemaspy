#
# Copyright (C) 2018 Nils Petzaell
#
# This file is part of SchemaSpy.
#
# SchemaSpy is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# SchemaSpy is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with SchemaSpy. If not, see <http://www.gnu.org/licenses/>.
#
dbms=PostgreSQL
description=11 or later

extends=pgsql

tableTypes=TABLE,PARTITIONED TABLE

selectCatalogsSql=SELECT datname AS catalog_name, pg_catalog.shobj_description(oid, 'pg_database') AS catalog_comment FROM pg_catalog.pg_database WHERE datname = :catalog

selectRoutinesSql=select p.proname || '(' || pg_get_function_arguments(p.oid) || ')' as routine_name, \
case p.prokind when 'f' then 'FUNCTION' when 'p' then 'PROCEDURE' when 'a' then 'AGGREGATE' when 'w' then 'WINDOW' else 'UNKNOWN' end as routine_type, \
pg_get_function_result(p.oid) as dtd_identifier, \
lang.lanname as routine_body, \
p.prosrc as routine_definition, \
'MODIFIES' as sql_data_access, \
case p.prosecdef when true then 'DEFINER' else 'INVOKER' end as security_type, \
p.provolatile = 'i' as is_deterministic, \
d.description as routine_comment \
from pg_proc p \
left join pg_namespace n ON n.oid = p.pronamespace \
left join pg_catalog.pg_language lang on lang.oid = p.prolang \
left join pg_description d on d.objoid = p.oid \
where n.nspname = :schema

selectRoutineParametersSql=select p.proname || '(' || pg_get_function_arguments(p.oid) || ')' as specific_name, \
names as parameter_name, \
case (modes) \
when 'i' then 'IN' \
when 'o' then 'OUT' \
when 'b' then 'INOUT' \
when 'v' then 'VARIADIC' \
when 't' then 'TABLE' \
else 'IN' \
end as parameter_mode, \
coalesce (format_type(argtypes, null), format_type(allargtypes, null))  as dtd_identifier \
from pg_proc p \
left join lateral unnest(p.proargnames, p.proargmodes, p.proargtypes, p.proallargtypes) x(names, modes, argtypes, allargtypes) on true \
left join pg_namespace n ON n.oid = p.pronamespace \
where n.nspname =  :schema
