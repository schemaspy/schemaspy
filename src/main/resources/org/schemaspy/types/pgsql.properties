#
# see http://schemaspy.org/dbtypes.html
# for configuration / customization details
#

description=PostgreSQL Before Version 11
connectionSpec=jdbc:postgresql://<hostOptionalPort>/<db>
host=host where database resides with optional port
port=port database is listening on
db=database name

driver=org.postgresql.Driver

# Sample path to the postgresql drivers.
# Use -dp to override.
driverPath=/org/schemaspy/drivers/postgresql-9.4.1208.jre6.jar

# return text that represents a specific :view / :schema
selectViewSql=select definition as view_definition from pg_views where viewname = :table UNION select definition as view_definition from pg_matviews where matviewname = :table
viewTypes=VIEW,MATERIALIZED VIEW

selectSchemasSql=SELECT nspname AS schema_name, pg_catalog.obj_description(oid, 'pg_namespace') AS schema_comment FROM pg_catalog.pg_namespace where nspname = :schema
selectCatalogsSql=SELECT datname AS catalog_name, pg_catalog.obj_description(datlastsysoid, 'pg_database') AS catalog_comment FROM pg_catalog.pg_database WHERE datname = :catalog ;
# selectTablesSql=select table_schema as table_catalog, null as table_schema, table_name, table_comment, table_rows from information_schema.tables where table_schema=:schema and table_type='BASE TABLE'

selectRoutinesSql=select \
r.routine_name || '(' || oidvectortypes(p.proargtypes) || ')' as routine_name, \
case when p.proisagg then 'AGGREGATE' else 'FUNCTION' end as routine_type, \
case when p.proretset then 'SETOF ' else '' end || case when r.data_type = 'USER-DEFINED' then r.type_udt_name else r.data_type end as dtd_identifier, \
r.external_language as routine_body,\
r.routine_definition, \
r.sql_data_access, \
r.security_type, \
r.is_deterministic, \
d.description as routine_comment \
from information_schema.routines r \
left join pg_namespace ns on r.routine_schema = ns.nspname \
left join pg_proc p on r.specific_name = p.proname || '_' || p.oid \
left join pg_description d on d.objoid = p.oid \
where r.routine_schema = :schema
selectRoutineParametersSql=select \
r.routine_name || '(' || oidvectortypes(pp.proargtypes) || ')' as specific_name, \
coalesce(p.parameter_name, '$' || p.ordinal_position) as parameter_name, \
p.data_type as dtd_identifier, \
p.parameter_mode \
from information_schema.parameters p \
left join information_schema.routines r on r.specific_name = p.specific_name \
left join pg_proc pp on r.specific_name = pp.proname || '_' || pp.oid \
where p.specific_schema = :schema \
order by p.specific_name, p.ordinal_position

selectCheckConstraintsSql=select tc.table_name, tc.constraint_name, cc.check_clause as text from information_schema.check_constraints cc left join information_schema.table_constraints tc on tc.constraint_catalog = cc.constraint_catalog and tc.constraint_schema = cc.constraint_schema and tc.constraint_name = cc.constraint_name where cc.constraint_name not like '%not_null' and tc.constraint_schema = :schema

selectSequencesSql=SELECT seqs.sequence_name, seqs.start_value, seqs.increment FROM information_schema.sequences seqs WHERE seqs.sequence_schema = :schema

selectRowCountSql=SELECT reltuples AS row_count FROM pg_class c inner join pg_namespace n on c.relowner = n.nspowner WHERE c.relname=:table and nspname=:schema
